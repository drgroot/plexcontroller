stages:
  - test
  - deploy
  - trigger

image: node:lts-alpine
cache:
  key: ${CI_COMMIT_REF_SLUG}
before_script:
  - npm install

test:
  image: postgres:13
  variables:
    RABBITMQ_DEFAULT_USER: guest
    RABBITMQ_DEFAULT_PASS: guest
    RABBITMQ_URL: amqp://guest:guest@127.0.0.1:5672
    DATABASE_URL: postgres://postgres:postgres@127.0.0.1:5432/postgres
    POSTGRES_DB: postgres
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: postgres
    NODE_ENV: development
  services:
    - rabbitmq
    - postgres
  stage: test
  before_script:
    - apt-get update
    - apt-get install -y curl
    - curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
    - apt-get install -y nodejs gcc g++ make
    - npm install
  script:
    - npm test

lint:
  stage: test
  script:
    - npx eslint src

audit:
  stage: test
  script:
    - npm audit

build:
  stage: test
  image: yusufali/terraform:0.13.4
  variables:
    DOCKER_DRIVER: overlay2
    GIT_SUBMODULE_STRATEGY: recursive
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:19.03.0-dind
  before_script:
    - echo "Building test image"
  script:
    - export IMAGE="$CI_SERVER_HOST/$CI_PROJECT_PATH"
    - docker build --network host -t $IMAGE .

deploy image:
  stage: deploy
  image: yusufali/terraform:0.13.4
  variables:
    DOCKER_DRIVER: overlay2
    GIT_SUBMODULE_STRATEGY: recursive
    DOCKER_TLS_CERTDIR: ""
  services:
    - docker:19.03.0-dind
  before_script:
    - docker login $CI_SERVER_HOST -u $GITLAB_USERNAME -p $GITLAB_PASSWORD
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
  script:
    - export IMAGE="$CI_SERVER_HOST/$CI_PROJECT_PATH"
    - docker build --network host -t $IMAGE -t $DOCKER_USERNAME/$CI_PROJECT_NAME .
    - docker push $IMAGE
    - docker push $DOCKER_USERNAME/$CI_PROJECT_NAME

deploy cluster:
  stage: trigger
  image: curlimages/curl
  only:
    - master
  before_script:
    - echo "About to deploy to cluster"
  script:
  - "curl -X POST -F token=$TOKEN -F ref=master https://$CI_SERVER_HOST/gitlab/api/v4/projects/25/trigger/pipeline"
